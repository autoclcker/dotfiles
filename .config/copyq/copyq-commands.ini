[Commands]
1\Command="copyq:\nvar shortcut = str(data(\"application/x-copyq-shortcut\"));\nvar row = shortcut ? shortcut.replace(/^\\D+/g, '') : currentItem();\nvar itemIndex = (config('row_index_from_one') == 'true') ? row - 1 : row;\nselectItems(itemIndex);\ncopy(\"application/x-copyq-item\", pack(getItem(itemIndex)));"
1\Icon=\xf0cb
1\InMenu=true
1\Name=Copy Nth Item
1\Shortcut=ctrl+1, ctrl+2, ctrl+3, ctrl+4, ctrl+5, ctrl+6, ctrl+7, ctrl+8, ctrl+9, ctrl+0
10\Command=copyq: (plugins.itemtags.hasTag(decodeURIComponent('Important')) ? plugins.itemtags.untag : plugins.itemtags.tag)(decodeURIComponent('Important'))
10\Icon=\xf02b
10\InMenu=true
10\InternalId=copyq_tags_tag:Important
10\Name=Toggle Tag \x201cImportant\x201d
10\Shortcut=i
11\Command=copyq: plugins.itemtags.untag(decodeURIComponent('Important'))
11\Icon=\xf02b
11\InMenu=true
11\InternalId=copyq_tags_untag:Important
11\MatchCommand=copyq: plugins.itemtags.hasTag(decodeURIComponent('Important')) || fail()
11\Name=Remove tag \x201cImportant\x201d
11\Shortcut=i
12\Command=copyq: plugins.itemtags.tag()
12\Icon=\xf02b
12\InMenu=true
12\InternalId=copyq_tags_tag
12\Name=Add a Tag
12\Shortcut=t
13\Command=copyq: plugins.itemtags.untag()
13\Icon=\xf02b
13\InMenu=true
13\Input=application/x-copyq-tags
13\InternalId=copyq_tags_untag
13\Name=Remove a Tag
13\Shortcut=shift+t
14\Command=copyq: plugins.itemtags.clearTags()
14\Icon=\xf02b
14\InMenu=true
14\Input=application/x-copyq-tags
14\InternalId=copyq_tags_clear
14\Name=Clear all tags
14\Shortcut=ctrl+\\
15\Command=copyq: toggle()
15\Icon=\xf022
15\InternalId=copyq_global_toggle
15\IsGlobalShortcut=true
15\Name=Show/hide main window
16\Command=copyq: showAt()
16\Icon=\xf022
16\InternalId=copyq_global_show_under_mouse
16\IsGlobalShortcut=true
16\Name=Show main window under mouse cursor
17\Command=copyq: ItemSelection(selectedTab()).selectRemovable().removeAll()
17\Icon=\xf51a
17\InMenu=true
17\MatchCommand="copyq: tab(selectedTab()); if (size() == 0) fail()"
17\Name=Clear Current Tab
17\Shortcut=ctrl+l
18\Command=copyq: plugins.itemtags.tag(decodeURIComponent('code%20%3A%3A'))
18\Icon=\xf02b
18\InMenu=true
18\InternalId=copyq_tags_tag:code ::
18\MatchCommand=copyq: plugins.itemtags.hasTag(decodeURIComponent('code%20%3A%3A')) && fail()
18\Name=Tag as \x201c\x63ode ::\x201d
19\Command=copyq: plugins.itemtags.untag(decodeURIComponent('code%20%3A%3A'))
19\Icon=\xf02b
19\InMenu=true
19\InternalId=copyq_tags_untag:code ::
19\MatchCommand=copyq: plugins.itemtags.hasTag(decodeURIComponent('code%20%3A%3A')) || fail()
19\Name=Remove tag \x201c\x63ode ::\x201d
2\Command="copyq:\nvar color = 'rgba(0, 255, 0, 0.5)'\nvar currentColor = str(selectedItemData(0)[mimeColor]);\nif (currentColor != color) {\n    setData(mimeColor, color)\n} else {\n    removeData(mimeColor)\n}"
2\Icon=\xf591
2\InMenu=true
2\MatchCommand="copyq:\nvar color = 'rgba(0, 255, 0, 0.5)'\nvar currentColor = str(selectedItemData(0)[mimeColor])\nif (currentColor != color) {\n    menuItem['text'] = 'Mark Items'\n    menuItem['tag'] = '__'\n    menuItem['color'] = color.replace(/\\d+\\.\\d+/, 1)\n} else {\n    menuItem['text'] = 'Unmark Items'\n    menuItem['tag'] = 'x'\n    menuItem['color'] = 'white'\n}\nmenuItem['icon'] = '\xf591'"
2\Name=Mark/Unmark Items
2\Shortcut=m
20\Command=copyq: plugins.itemtags.tag(decodeURIComponent('code%3A%3A'))
20\Icon=\xf02b
20\InMenu=true
20\InternalId=copyq_tags_tag:code::
20\MatchCommand=copyq: plugins.itemtags.hasTag(decodeURIComponent('code%3A%3A')) && fail()
20\Name=Tag as \x201c\x63ode::\x201d
21\Command=copyq: plugins.itemtags.untag(decodeURIComponent('code%3A%3A'))
21\Icon=\xf02b
21\InMenu=true
21\InternalId=copyq_tags_untag:code::
21\MatchCommand=copyq: plugins.itemtags.hasTag(decodeURIComponent('code%3A%3A')) || fail()
21\Name=Remove tag \x201c\x63ode::\x201d
22\Command=copyq: (plugins.itemtags.hasTag(decodeURIComponent('code')) ? plugins.itemtags.untag : plugins.itemtags.tag)(decodeURIComponent('code'))
22\Icon=\xf02b
22\InMenu=true
22\InternalId=copyq_tags_tag:code
22\Name=Toggle Tag \x201c\x63ode\x201d
23\Command=copyq: plugins.itemtags.untag(decodeURIComponent('code'))
23\Icon=\xf02b
23\InMenu=true
23\InternalId=copyq_tags_untag:code
23\MatchCommand=copyq: plugins.itemtags.hasTag(decodeURIComponent('code')) || fail()
23\Name=Remove tag \x201c\x63ode\x201d
24\Command=copyq: plugins.itemtags.tag(decodeURIComponent('code%3A%3A.%2A'))
24\Icon=\xf02b
24\InMenu=true
24\InternalId=copyq_tags_tag:code::.*
24\MatchCommand=copyq: plugins.itemtags.hasTag(decodeURIComponent('code%3A%3A.%2A')) && fail()
24\Name=Tag as \x201c\x63ode::.*\x201d
25\Command=copyq: plugins.itemtags.untag(decodeURIComponent('code%3A%3A.%2A'))
25\Icon=\xf02b
25\InMenu=true
25\InternalId=copyq_tags_untag:code::.*
25\MatchCommand=copyq: plugins.itemtags.hasTag(decodeURIComponent('code%3A%3A.%2A')) || fail()
25\Name=Remove tag \x201c\x63ode::.*\x201d
26\Command=copyq: (plugins.itemtags.hasTag(decodeURIComponent('code.%2A')) ? plugins.itemtags.untag : plugins.itemtags.tag)(decodeURIComponent('code.%2A'))
26\Icon=\xf02b
26\InMenu=true
26\InternalId=copyq_tags_tag:code.*
26\Name=Toggle Tag \x201c\x63ode.*\x201d
27\Command=copyq: plugins.itemtags.untag(decodeURIComponent('code.%2A'))
27\Icon=\xf02b
27\InMenu=true
27\InternalId=copyq_tags_untag:code.*
27\MatchCommand=copyq: plugins.itemtags.hasTag(decodeURIComponent('code.%2A')) || fail()
27\Name=Remove tag \x201c\x63ode.*\x201d
28\Command=copyq: (plugins.itemtags.hasTag(decodeURIComponent('')) ? plugins.itemtags.untag : plugins.itemtags.tag)(decodeURIComponent(''))
28\Icon=\xf02b
28\InMenu=true
28\InternalId=copyq_tags_tag:
28\Name=Toggle Tag \x201c\x201d
3\Automatic=true
3\Command="copyq:\nconst imageTab = 'images';\n\nfunction hasImageFormat(formats) {\n    for (const format of formats.values()) {\n        if (format.startsWith('image/'))\n            return true;\n    }\n    return false;\n}\n\nconst formats = dataFormats();\nif (hasImageFormat(formats)) {\n    setData(mimeOutputTab, imageTab);\n}"
3\Icon=\xf302
3\Name=Image Tab
4\Automatic=true
4\Command="copyq:\nconst tagsMime = 'application/x-copyq-tags'\nconst time = dateString('yyyy-MM-dd hh:mm:ss')\nconst oldTags = data(tagsMime)\nconst tags = `${oldTags}, ${time}`\n\nfunction hasImageFormat(formats) {\n    for (const format of formats.values()) {\n        if (format.startsWith('image/'))\n            return true;\n    }\n    return false;\n}\n\nconst formats = dataFormats();\nif (!hasImageFormat(formats)) {\n    setData(tagsMime, tags);\n}"
4\Icon=\xef\x80\x97
4\Name=Store Copy Time
5\Automatic=true
5\Command="copyq:\nvar tabName = 'URLs';\nfunction lower(data) {\n    return str(data).toLowerCase()\n}\n\nfunction findHeader(reply, headerName) {\n    reply.data  // fetches data and headers\n    var headers = reply.headers\n    for (var i in headers) {\n        var header = headers[i]\n        if (lower(header[0]) === headerName)\n           return header[1]\n    }\n    return ''\n}\n\nfunction fetchContent(url, maxRedirects) {\n    if (maxRedirects === undefined)\n        maxRedirects = 4\n\n    serverLog('Fetching: ' + url)\n    var reply = networkGet(url)\n    if (maxRedirects == 0)\n        return reply\n\n    var header = findHeader(reply, 'location')\n    if (header)\n        return fetchContent(header, maxRedirects - 1)\n\n    return reply\n}\n\nfunction decodeHtml(html) {\n    return html.replace(/&#(\\d+);/g, function(match, charCode) {\n        return String.fromCharCode(charCode);\n    });\n}\n\nfunction isHtml(reply) {\n    var headers = reply.headers\n    for (var i in headers) {\n      var header = headers[i]\n      if (lower(header[0]) === 'content-type')\n         return lower(header[1]).indexOf(mimeHtml) === 0\n    }\n    return false\n}\n\nfunction grep(content, re) {\n    return content ? (re.exec(content) || [])[1] : ''\n}\n\nfunction getTitle(content) {\n    var title = grep(content, /<title[^>]*>([^<]*)<\\/title>/i)\n    return title ? decodeHtml(title.trim()) : ''\n}\n\nfunction getFavicon(content) {\n    var iconLine = grep(content, /<link([^>]*rel=[\"'](?:shortcut )?icon[\"'][^>]*)/i)\n    var icon = grep(iconLine, /href=[\"']([^\"']*)/i)\n\n    if (!icon)\n      return ''\n\n    // Icon path can be complete URL.\n    if (icon.indexOf('://') != -1)\n      return fetchContent(icon).data\n\n    // Icon path can be missing protocol.\n    if (icon.substr(0, 2) === '//') {\n      var i = url.search(/\\/\\//)\n      var protocol = (i == -1) ? 'http:' : url.substr(0, i)\n      return fetchContent(protocol + icon).data\n    }\n\n    // Icon path can be relative to host URL.\n    if (icon[0] === '/') {\n      var baseUrl = url.substr(0, url.search(/[^\\/:](\\/|$)/) + 1)\n      return fetchContent(baseUrl + icon).data\n    }\n\n    // Icon path can be relative to current URL.\n    var baseUrl = url.substr(0, url.lastIndexOf('/') + 1)\n    return fetchContent(baseUrl + icon).data\n}\n\nvar url = str(input()).trim()\nserverLog('Fetching icon and title: ' + url)\n\n// URL already added? (Just check the top of the list.)\nif (url === str(read(0)))\n    abort()\n\n// Fetch HTML.\nvar reply = fetchContent(url)\nif (!isHtml(reply))\n    abort()\n\nvar content = str(reply.data)\n\nvar title = getTitle(content)\nvar icon = getFavicon(content)\n\nsetData(mimeText, url)\nsetData(mimeItemNotes, title || '')\nsetData(mimeIcon, icon)\nsetData(mimeOutputTab, tabName)"
5\Icon=\xf0c1
5\Input=text/plain
5\Match=^https?://
5\Name=Tab for URLs with Title and Icon
6\Command="copyq:\nvar prefix = 'file://'\nvar suffixToMime = {\n    'png': 'image/png',\n    'jpg': 'image/jpeg',\n    'jpeg': 'image/jpeg',\n    'bmp': 'image/bmp',\n    'svg': 'image/svg+xml',\n}\n\nfunction startsWith(text, what) {\n    return what === text.substring(0, what.length)\n}\n\nfunction tryShowImage(mime) {\n    var text = str(data(mime))\n    if ( !startsWith(text, prefix) )\n        return false\n\n    var i = text.lastIndexOf('.')\n    if (i == -1)\n        return false\n\n    var suffix = text.substring(i + 1)\n    var imageMime = suffixToMime[suffix]\n    if (imageMime === undefined)\n        return false\n\n    var path = text.substring(prefix.length)\n\n    var f = new File(path)\n    if ( !f.openReadOnly() )\n        return false\n\n    var imageData = f.readAll()\n    f.close()\n    if ( imageData.size() === 0 )\n        return false\n\n    setData(mimeItemNotes, path)\n    setData(imageMime, imageData)\n    return true\n}\n\ntryShowImage(mimeText)\n    || tryShowImage(mimeUriList)"
6\Display=true
6\Icon=\xf1c5
6\Name=Preview Image Files
7\Command="copyq:\nconst mimeTags = 'application/x-copyq-tags'\n\nconst pythonCode = `\nimport sys\nfrom pygments import highlight\nfrom pygments.lexers import get_lexer_by_name\nfrom pygments.formatters import HtmlFormatter\n\ncode = sys.stdin.read()\nlexer = get_lexer_by_name(sys.argv[1])\nformatter = HtmlFormatter(noclasses=True, style='tango', encoding='utf-8')\nformatter.style.background_color = 'none'\nprint(highlight(code, lexer, formatter).decode())\n`\n\nconst tagPartToLang = {\n    'CopyQ Commands': 'js',\n    '.cpp': 'cpp',\n    '.h ': 'cpp',\n    '.py': 'python',\n    '.rs': 'rust',\n    '.rb': 'ruby',\n    '.yaml': 'yaml',\n    '.yml': 'yaml',\n    '@': 'md',\n}\n\nconst prefixToLang = {\n    '[Command]': 'ini',\n    'copyq:': 'js',\n    '#!/bin/bash': 'bash',\n    'SELECT': 'sql',\n}\n\nconst textPartToLang = {\n    '; then\\n': 'bash',\n    '; do\\n': 'bash',\n    '`': 'md',\n    ' function(': 'js',\n    'fn ': 'rust',\n    'if (': 'cpp',\n    'for (': 'cpp',\n    'while (': 'cpp',\n    '#include ': 'cpp',\n    '</': 'html',\n    'def ': 'python',\n    'self ': 'python',\n    '\":': 'json',\n    '\\n##': 'md',\n    '](': 'md',\n    '\\n* ': 'md',\n    '#{': 'ruby',\n    '(@': 'ruby',\n    ':\\n': 'yaml',\n}\n\nconst errorLabel = 'Highlight Code Error'\n\nfunction contains(text, what) {\n    return text.indexOf(what) != -1\n}\n\nfunction startsWith(text, what) {\n    return what === text.substring(0, what.length)\n}\n\nfunction langFromTags(tags) {\n    for (var tagPart in tagPartToLang) {\n      if (tags.indexOf(tagPart) != -1)\n        return tagPartToLang[tagPart]\n    }\n    return ''\n}\n\nfunction langFromPrefix(text) {\n    for (var prefix in prefixToLang) {\n      if (startsWith(text, prefix))\n        return prefixToLang[prefix]\n    }\n    return ''\n}\n\nfunction langFromTextPart(text) {\n    for (var part in textPartToLang) {\n      if (text.indexOf(part) != -1)\n        return textPartToLang[part]\n    }\n    return ''\n}\n\nfunction addHtml(html, tag) {\n    setData(mimeHtml, html)\n    if (tag) {\n        tags = data(mimeTags)\n        tags = (tags ? str(tags) + ',' : '') + tag\n        setData(mimeTags, tags)\n    }\n    return true\n}\n\nfunction addHtmlOutput(result, tag) {\n    if (!result) {\n        notification(\n            '.id', 'highlight',\n            '.message', 'Failed to add syntax highlighting',\n        )\n        return false\n    }\n\n    if (result.exit_code !== 0) {\n        popup(errorLabel, result.stderr)\n        return false\n    }\n\n    return addHtml(result.stdout, tag)\n}\n\nfunction code(textData, lang) {\n    result = execute('python3', '-c', pythonCode, lang, null, textData)\n    return addHtmlOutput(result, 'code::' + lang)\n}\n\nfunction highlightCode() {\n    var formats = dataFormats()\n    if ( formats.indexOf(mimeHidden) != -1\n      || formats.indexOf(mimeHtml) != -1 ) {\n        return false\n    }\n\n    const textData = data(mimeText)\n    if (textData.length == 0 || textData.length > 10000)\n        return false\n\n    const text = str(textData)\n\n    tags = str(data(mimeTags))\n\n    try {\n        var lang = langFromTags(tags)\n                || langFromPrefix(text)\n                || langFromTextPart(text)\n        if (lang)\n            return code(textData, lang)\n    } catch(e) {\n        popup(errorLabel, e)\n        serverLog(errorLabel + ': ' + e)\n    }\n\n    return false\n}\n\nhighlightCode()"
7\Display=true
7\Icon=\xf121
7\Name=Highlight Code
8\Command=copyq: plugins.itempinned.pin()
8\Icon=\xf08d
8\InMenu=true
8\Input=!OUTPUT
8\InternalId=copyq_pinned_pin
8\Name=Pin
8\Output=application/x-copyq-item-pinned
8\Shortcut=p
9\Command=copyq: plugins.itempinned.unpin()
9\Icon=\xf08d
9\InMenu=true
9\Input=application/x-copyq-item-pinned
9\InternalId=copyq_pinned_unpin
9\Name=Unpin
9\Shortcut=p
size=28
