[Commands]
1\Automatic=true
1\Command="copyq:\nvar tabName = 'buffer'\nvar minBytes = 1024\n\n function hasBigData() {\n var itemSize = 0\n var formats = dataFormats()\n for (var i in formats) {\n itemSize += data(formats[i]).size()\n if (itemSize >= minBytes)\n return true\n }\n return false\n}\n\nif (hasBigData()) {\n setData(mimeOutputTab, tabName)\n}"
1\Icon=\xf1c0
1\Name=Big Data Tab
10\Automatic=true
10\Command="copyq:\nvar tabName = 'URLs';\nfunction lower(data) {\n return str(data).toLowerCase()\n}\n\nfunction findHeader(reply, headerName) {\n reply.data // fetches data and headers\n var headers = reply.headers\n for (var i in headers) {\n var header = headers[i]\n if (lower(header[0]) === headerName)\n return header[1]\n }\n return ''\n}\n\nfunction fetchContent(url, maxRedirects) {\n if (maxRedirects === undefined)\n maxRedirects = 4\n\n serverLog('Fetching: ' + url)\n var reply = networkGet(url)\n if (maxRedirects == 0)\n return reply\n\n var header = findHeader(reply, 'location')\n if (header)\n return fetchContent(header, maxRedirects - 1)\n\n return reply\n}\n\nfunction decodeHtml(html) {\n return html.replace(/&#(\\d+);/g, function(match, charCode) {\n return String.fromCharCode(charCode);\n });\n}\n\nfunction isHtml(reply) {\n var headers = reply.headers\n for (var i in headers) {\n var header = headers[i]\n if (lower(header[0]) === 'content-type')\n return lower(header[1]).indexOf(mimeHtml) === 0\n }\n return false\n}\n\nfunction grep(content, re) {\n return content ? (re.exec(content) || [])[1] : ''\n}\n\nfunction getTitle(content) {\n var title = grep(content, /<title[^>]*>([^<]*)<\\/title>/i)\n return title ? decodeHtml(title.trim()) : ''\n}\n\nfunction getFavicon(content) {\n var iconLine = grep(content, /<link([^>]*rel=[\"'](?:shortcut )?icon[\"'][^>]*)/i)\n var icon = grep(iconLine, /href=[\"']([^\"']*)/i)\n\n if (!icon)\n return ''\n\n // Icon path can be complete URL.\n if (icon.indexOf('://') != -1)\n return fetchContent(icon).data\n\n // Icon path can be missing protocol.\n if (icon.substr(0, 2) === '//') {\n var i = url.search(/\\/\\//)\n var protocol = (i == -1) ? 'http:' : url.substr(0, i)\n return fetchContent(protocol + icon).data\n }\n\n // Icon path can be relative to host URL.\n if (icon[0] === '/') {\n var baseUrl = url.substr(0, url.search(/[^\\/:](\\/|$)/) + 1)\n return fetchContent(baseUrl + icon).data\n }\n\n // Icon path can be relative to current URL.\n var baseUrl = url.substr(0, url.lastIndexOf('/') + 1)\n return fetchContent(baseUrl + icon).data\n}\n\nvar url = str(input()).trim()\nserverLog('Fetching icon and title: ' + url)\n\n// URL already added? (Just check the top of the list.)\nif (url === str(read(0)))\n abort()\n\n// Fetch HTML.\nvar reply = fetchContent(url)\nif (!isHtml(reply))\n abort()\n\nvar content = str(reply.data)\n\nvar title = getTitle(content)\nvar icon = getFavicon(content)\n\nsetData(mimeText, url)\nsetData(mimeItemNotes, title || '')\nsetData(mimeIcon, icon)\nsetData(mimeOutputTab, tabName)"
10\Icon=\xf0c1
10\Input=text/plain
10\Match=^https?://
10\Name=Tab for URLs with Title and Icon
11\Command="copyq:\nvar prefix = 'file://'\nvar suffixToMime = {\n 'png': 'image/png',\n 'jpg': 'image/jpeg',\n 'jpeg': 'image/jpeg',\n 'bmp': 'image/bmp',\n 'svg': 'image/svg+xml',\n}\n\nfunction startsWith(text, what) {\n return what === text.substring(0, what.length)\n}\n\nfunction tryShowImage(mime) {\n var text = str(data(mime))\n if ( !startsWith(text, prefix) )\n return false\n\n var i = text.lastIndexOf('.')\n if (i == -1)\n return false\n\n var suffix = text.substring(i + 1)\n var imageMime = suffixToMime[suffix]\n if (imageMime === undefined)\n return false\n\n var path = text.substring(prefix.length)\n\n var f = new File(path)\n if ( !f.openReadOnly() )\n return false\n\n var imageData = f.readAll()\n f.close()\n if ( imageData.size() === 0 )\n return false\n\n setData(mimeItemNotes, path)\n setData(imageMime, imageData)\n return true\n}\n\ntryShowImage(mimeText)\n || tryShowImage(mimeUriList)"
11\Display=true
11\Icon=\xf1c5
11\Name=Preview Image Files
12\Command=copyq: plugins.itempinned.pin()
12\Icon=\xf08d
12\InMenu=true
12\Input=!OUTPUT
12\InternalId=copyq_pinned_pin
12\Name=Pin
12\Output=application/x-copyq-item-pinned
12\Shortcut=p
13\Command=copyq: plugins.itempinned.unpin()
13\Icon=\xf08d
13\InMenu=true
13\Input=application/x-copyq-item-pinned
13\InternalId=copyq_pinned_unpin
13\Name=Unpin
13\Shortcut=p
14\Command=copyq: (plugins.itemtags.hasTag(decodeURIComponent('Important')) ? plugins.itemtags.untag : plugins.itemtags.tag)(decodeURIComponent('Important'))
14\Icon=\xf02b
14\InMenu=true
14\InternalId=copyq_tags_tag:Important
14\Name=Toggle Tag \x201cImportant\x201d
14\Shortcut=i
15\Command=copyq: plugins.itemtags.untag(decodeURIComponent('Important'))
15\Icon=\xf02b
15\InMenu=true
15\InternalId=copyq_tags_untag:Important
15\MatchCommand=copyq: plugins.itemtags.hasTag(decodeURIComponent('Important')) || fail()
15\Name=Remove tag \x201cImportant\x201d
15\Shortcut=i
16\Command=copyq: plugins.itemtags.tag()
16\Icon=\xf02b
16\InMenu=true
16\InternalId=copyq_tags_tag
16\Name=Add a Tag
16\Shortcut=t
17\Command=copyq: plugins.itemtags.untag()
17\Icon=\xf02b
17\InMenu=true
17\Input=application/x-copyq-tags
17\InternalId=copyq_tags_untag
17\Name=Remove a Tag
17\Shortcut=shift+t
18\Command=copyq: plugins.itemtags.clearTags()
18\Icon=\xf02b
18\InMenu=true
18\Input=application/x-copyq-tags
18\InternalId=copyq_tags_clear
18\Name=Clear all tags
18\Shortcut=ctrl+\\
19\Command=copyq: toggle()
19\Icon=\xf022
19\InternalId=copyq_global_toggle
19\IsGlobalShortcut=true
19\Name=Show/hide main window
2\Command=copyq:\nselectItems(currentItem() + 1)
2\Icon=\xf0ab
2\InMenu=true
2\Name=Next
2\Shortcut=ctrl+n
20\Command=copyq: showAt()
20\Icon=\xf022
20\InternalId=copyq_global_show_under_mouse
20\IsGlobalShortcut=true
20\Name=Show main window under mouse cursor
21\Command=copyq: ItemSelection(selectedTab()).selectRemovable().removeAll()
21\Icon=\xf51a
21\InMenu=true
21\MatchCommand="copyq: tab(selectedTab()); if (size() == 0) fail()"
21\Name=Clear Current Tab
21\Shortcut=ctrl+l
3\Command=copyq:\nselectItems(currentItem() - 1)
3\Icon=\xf0aa
3\InMenu=true
3\Name=Previous
3\Shortcut=ctrl+p
4\Command="copyq:\nvar shortcut = str(data(mimeShortcut))\nselectItems(shortcut)\ncopy(mimeItems, pack(getItem(shortcut)))\nhide()\npaste()"
4\Icon=\xf0cb
4\InMenu=true
4\Name=Select and Paste Nth Item
4\Shortcut=1, 2, 3, 4, 5, 6, 7, 8, 9, 0
5\Command="copyq:\nif ( dataFormats().indexOf(mimeHidden) != -1 )\n removeData(mimeHidden)\nelse\n setData(mimeHidden, 1)"
5\Icon=\xf070
5\InMenu=true
5\Name=Hide/Show Item Content
5\Shortcut=x
6\Automatic=true
6\Command="copyq:\nconst tagsMime = 'application/x-copyq-tags'\nconst time = dateString('yyyy-MM-dd hh:mm:ss')\nconst oldTags = data(tagsMime)\nconst tags = `${oldTags}, ${time}`\nsetData(tagsMime, tags)"
6\Icon=\xef\x80\x97
6\Name=Store Copy Time
7\Automatic=true
7\Command="copyq:\nconst tagsMime = 'application/x-copyq-tags'\nconst window = data(mimeWindowTitle)\nconst oldTags = data(tagsMime)\nconst tags = `${oldTags}, ${window}`\nsetData(tagsMime, tags)"
7\Icon=\xef\x80\x89
7\Name=Store Window Title
8\Automatic=true
8\Command="copyq:\nconst tagsMime = 'application/x-copyq-tags'\nconst imageTab = 'images';\n\nfunction hasImageFormat(formats) {\n for (const format of formats.values()) {\n if (format.startsWith('image/'))\n return true;\n }\n return false;\n}\n\nconst formats = dataFormats();\nif (hasImageFormat(formats)) {\n setData(mimeOutputTab, imageTab)\n\nsetData(tagsMime, '');\n}"
8\Icon=\xf302
8\Name=Image Tab
9\Command="copyq:\nvar color = 'rgba(0, 255, 0, 0.5)'\nvar currentColor = str(selectedItemData(0)[mimeColor]);\nif (currentColor != color) {\n setData(mimeColor, color)\n} else {\n removeData(mimeColor)\n}"
9\Icon=\xf591
9\InMenu=true
9\MatchCommand="copyq:\nvar color = 'rgba(0, 255, 0, 0.5)'\nvar currentColor = str(selectedItemData(0)[mimeColor])\nif (currentColor != color) {\n menuItem['text'] = 'Mark Items'\n menuItem['tag'] = '__'\n menuItem['color'] = color.replace(/\\d+\\.\\d+/, 1)\n} else {\n menuItem['text'] = 'Unmark Items'\n menuItem['tag'] = 'x'\n menuItem['color'] = 'white'\n}\nmenuItem['icon'] = '\xf591'"
9\Name=Mark/Unmark Items
9\Shortcut=m
size=21
