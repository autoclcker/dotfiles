[Commands]
1\Command="copyq:\nvar shortcut = str(data(mimeShortcut))\nselectItems(shortcut)\ncopy(mimeItems, pack(getItem(shortcut)))\nhide()\npaste()"
1\Icon=\xf0cb
1\InMenu=true
1\Name=Select and Paste Nth Item
1\Shortcut=1, 2, 3, 4, 5, 6, 7, 8, 9, 0
10\Command=copyq: plugins.itempinned.unpin()
10\Icon=\xf08d
10\InMenu=true
10\Input=application/x-copyq-item-pinned
10\InternalId=copyq_pinned_unpin
10\Name=Unpin
10\Shortcut=p
11\Command=copyq: (plugins.itemtags.hasTag(decodeURIComponent('Important')) ? plugins.itemtags.untag : plugins.itemtags.tag)(decodeURIComponent('Important'))
11\Icon=\xf02b
11\InMenu=true
11\InternalId=copyq_tags_tag:Important
11\Name=Toggle Tag \x201cImportant\x201d
11\Shortcut=i
12\Command=copyq: plugins.itemtags.untag(decodeURIComponent('Important'))
12\Icon=\xf02b
12\InMenu=true
12\InternalId=copyq_tags_untag:Important
12\MatchCommand=copyq: plugins.itemtags.hasTag(decodeURIComponent('Important')) || fail()
12\Name=Remove tag \x201cImportant\x201d
12\Shortcut=i, shift+i
13\Command=copyq: plugins.itemtags.tag()
13\Icon=\xf02b
13\InMenu=true
13\InternalId=copyq_tags_tag
13\Name=Add a Tag
13\Shortcut=t
14\Command=copyq: plugins.itemtags.untag()
14\Icon=\xf02b
14\InMenu=true
14\Input=application/x-copyq-tags
14\InternalId=copyq_tags_untag
14\Name=Remove a Tag
14\Shortcut=shift+t
15\Command=copyq: plugins.itemtags.clearTags()
15\Icon=\xf02b
15\InMenu=true
15\Input=application/x-copyq-tags
15\InternalId=copyq_tags_clear
15\Name=Clear all tags
15\Shortcut=ctrl+\\
16\Command=copyq: toggle()
16\Icon=\xf022
16\InternalId=copyq_global_toggle
16\IsGlobalShortcut=true
16\Name=Show/hide main window
17\Command=copyq: showAt()
17\Icon=\xf022
17\InternalId=copyq_global_show_under_mouse
17\IsGlobalShortcut=true
17\Name=Show main window under mouse cursor
18\Command=copyq: ItemSelection(selectedTab()).selectRemovable().removeAll()
18\Icon=\xf51a
18\InMenu=true
18\MatchCommand="copyq: tab(selectedTab()); if (size() == 0) fail()"
18\Name=Clear Current Tab
18\Shortcut=ctrl+l
19\Command=copyq: (plugins.itemtags.hasTag(decodeURIComponent('%5Cd%5Cd%5Cd%5Cd-%5Cd%5Cd-%5Cd%5Cd.%2A')) ? plugins.itemtags.untag : plugins.itemtags.tag)(decodeURIComponent('%5Cd%5Cd%5Cd%5Cd-%5Cd%5Cd-%5Cd%5Cd.%2A'))
19\Icon=\xf02b
19\InMenu=true
19\InternalId=copyq_tags_tag:\\d\\d\\d\\d-\\d\\d-\\d\\d.*
19\Name=Toggle Tag \x201c\\d\\d\\d\\d-\\d\\d-\\d\\d.*\x201d
2\Command="copyq:\nif ( dataFormats().indexOf(mimeHidden) != -1 )\n  removeData(mimeHidden)\nelse\n  setData(mimeHidden, 1)"
2\Icon=\xf070
2\InMenu=true
2\Name=Hide/Show Item Content
2\Shortcut=x
20\Command=copyq: (plugins.itemtags.hasTag(decodeURIComponent('%5C1%5C2%5C3%5C4-%5C5%5C6-%5C7%5C8.%2A')) ? plugins.itemtags.untag : plugins.itemtags.tag)(decodeURIComponent('%5C1%5C2%5C3%5C4-%5C5%5C6-%5C7%5C8.%2A'))
20\Icon=\xf02b
20\InMenu=true
20\InternalId=copyq_tags_tag:\\1\\2\\3\\4-\\5\\6-\\7\\8.*
20\Name=Toggle Tag \x201c\\1\\2\\3\\4-\\5\\6-\\7\\8.*\x201d
21\Command=copyq: (plugins.itemtags.hasTag(decodeURIComponent('code.%2A')) ? plugins.itemtags.untag : plugins.itemtags.tag)(decodeURIComponent('code.%2A'))
21\Icon=\xf02b
21\InMenu=true
21\InternalId=copyq_tags_tag:code.*
21\Name=Toggle Tag \x201c\x63ode.*\x201d
3\Automatic=true
3\Command="copyq:\nconst tagsMime = 'application/x-copyq-tags'\nconst time = dateString('yyyy-MM-dd hh:mm:ss')\nconst oldTags = data(tagsMime)\nconst tags = `${oldTags}, ${time}`\nsetData(tagsMime, tags)"
3\Icon=\xef\x80\x97
3\Name=Store Copy Time
4\Automatic=true
4\Command="copyq:\nconst tagsMime = 'application/x-copyq-tags'\nconst window = data(mimeWindowTitle)\nconst oldTags = data(tagsMime)\nconst tags = `${oldTags}, ${window}`\nsetData(tagsMime, tags)"
4\Icon=\xef\x80\x89
4\Name=Store Window Title
5\Automatic=true
5\Command="copyq:\nconst tagsMime = 'application/x-copyq-tags'\nconst imageTab = 'images';\n\nfunction hasImageFormat(formats) {\n    for (const format of formats.values()) {\n        if (format.startsWith('image/'))\n            return true;\n    }\n    return false;\n}\n\nconst formats = dataFormats();\nif (hasImageFormat(formats)) {\n    setData(mimeOutputTab, imageTab)\n\nsetData(tagsMime, '');\n}"
5\Icon=\xf302
5\Name=Image Tab
6\Command="copyq:\nvar color = 'rgba(0, 255, 0, 0.5)'\nvar currentColor = str(selectedItemData(0)[mimeColor]);\nif (currentColor != color) {\n    setData(mimeColor, color)\n} else {\n    removeData(mimeColor)\n}"
6\Icon=\xf591
6\InMenu=true
6\MatchCommand="copyq:\nvar color = 'rgba(0, 255, 0, 0.5)'\nvar currentColor = str(selectedItemData(0)[mimeColor])\nif (currentColor != color) {\n    menuItem['text'] = 'Mark Items'\n    menuItem['tag'] = '__'\n    menuItem['color'] = color.replace(/\\d+\\.\\d+/, 1)\n} else {\n    menuItem['text'] = 'Unmark Items'\n    menuItem['tag'] = 'x'\n    menuItem['color'] = 'white'\n}\nmenuItem['icon'] = '\xf591'"
6\Name=Mark/Unmark Items
6\Shortcut=m
7\Automatic=true
7\Command="copyq:\nvar tabName = 'URLs';\nfunction lower(data) {\n    return str(data).toLowerCase()\n}\n\nfunction findHeader(reply, headerName) {\n    reply.data  // fetches data and headers\n    var headers = reply.headers\n    for (var i in headers) {\n        var header = headers[i]\n        if (lower(header[0]) === headerName)\n           return header[1]\n    }\n    return ''\n}\n\nfunction fetchContent(url, maxRedirects) {\n    if (maxRedirects === undefined)\n        maxRedirects = 4\n\n    serverLog('Fetching: ' + url)\n    var reply = networkGet(url)\n    if (maxRedirects == 0)\n        return reply\n\n    var header = findHeader(reply, 'location')\n    if (header)\n        return fetchContent(header, maxRedirects - 1)\n\n    return reply\n}\n\nfunction decodeHtml(html) {\n    return html.replace(/&#(\\d+);/g, function(match, charCode) {\n        return String.fromCharCode(charCode);\n    });\n}\n\nfunction isHtml(reply) {\n    var headers = reply.headers\n    for (var i in headers) {\n      var header = headers[i]\n      if (lower(header[0]) === 'content-type')\n         return lower(header[1]).indexOf(mimeHtml) === 0\n    }\n    return false\n}\n\nfunction grep(content, re) {\n    return content ? (re.exec(content) || [])[1] : ''\n}\n\nfunction getTitle(content) {\n    var title = grep(content, /<title[^>]*>([^<]*)<\\/title>/i)\n    return title ? decodeHtml(title.trim()) : ''\n}\n\nfunction getFavicon(content) {\n    var iconLine = grep(content, /<link([^>]*rel=[\"'](?:shortcut )?icon[\"'][^>]*)/i)\n    var icon = grep(iconLine, /href=[\"']([^\"']*)/i)\n\n    if (!icon)\n      return ''\n\n    // Icon path can be complete URL.\n    if (icon.indexOf('://') != -1)\n      return fetchContent(icon).data\n\n    // Icon path can be missing protocol.\n    if (icon.substr(0, 2) === '//') {\n      var i = url.search(/\\/\\//)\n      var protocol = (i == -1) ? 'http:' : url.substr(0, i)\n      return fetchContent(protocol + icon).data\n    }\n\n    // Icon path can be relative to host URL.\n    if (icon[0] === '/') {\n      var baseUrl = url.substr(0, url.search(/[^\\/:](\\/|$)/) + 1)\n      return fetchContent(baseUrl + icon).data\n    }\n\n    // Icon path can be relative to current URL.\n    var baseUrl = url.substr(0, url.lastIndexOf('/') + 1)\n    return fetchContent(baseUrl + icon).data\n}\n\nvar url = str(input()).trim()\nserverLog('Fetching icon and title: ' + url)\n\n// URL already added? (Just check the top of the list.)\nif (url === str(read(0)))\n    abort()\n\n// Fetch HTML.\nvar reply = fetchContent(url)\nif (!isHtml(reply))\n    abort()\n\nvar content = str(reply.data)\n\nvar title = getTitle(content)\nvar icon = getFavicon(content)\n\nsetData(mimeText, url)\nsetData(mimeItemNotes, title || '')\nsetData(mimeIcon, icon)\nsetData(mimeOutputTab, tabName)"
7\Icon=\xf0c1
7\Input=text/plain
7\Match=^https?://
7\Name=Tab for URLs with Title and Icon
8\Command="copyq:\nvar prefix = 'file://'\nvar suffixToMime = {\n    'png': 'image/png',\n    'jpg': 'image/jpeg',\n    'jpeg': 'image/jpeg',\n    'bmp': 'image/bmp',\n    'svg': 'image/svg+xml',\n}\n\nfunction startsWith(text, what) {\n    return what === text.substring(0, what.length)\n}\n\nfunction tryShowImage(mime) {\n    var text = str(data(mime))\n    if ( !startsWith(text, prefix) )\n        return false\n\n    var i = text.lastIndexOf('.')\n    if (i == -1)\n        return false\n\n    var suffix = text.substring(i + 1)\n    var imageMime = suffixToMime[suffix]\n    if (imageMime === undefined)\n        return false\n\n    var path = text.substring(prefix.length)\n\n    var f = new File(path)\n    if ( !f.openReadOnly() )\n        return false\n\n    var imageData = f.readAll()\n    f.close()\n    if ( imageData.size() === 0 )\n        return false\n\n    setData(mimeItemNotes, path)\n    setData(imageMime, imageData)\n    return true\n}\n\ntryShowImage(mimeText)\n    || tryShowImage(mimeUriList)"
8\Display=true
8\Icon=\xf1c5
8\Name=Preview Image Files
9\Command=copyq: plugins.itempinned.pin()
9\Icon=\xf08d
9\InMenu=true
9\Input=!OUTPUT
9\InternalId=copyq_pinned_pin
9\Name=Pin
9\Output=application/x-copyq-item-pinned
9\Shortcut=p
size=21
